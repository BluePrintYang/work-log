(window.webpackJsonp=window.webpackJsonp||[]).push([[275],{679:function(t,e,a){"use strict";a.r(e);var l=a(56),v=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log"}},[t._v("#")]),t._v(" log")]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&mid=2247506203&idx=2&sn=8c3b9e8c059359598eb7e7ea15ae9650&chksm=fddd0fdfcaaa86c9542780e326ef0a256740f87dd36f8e795b47852ca74b32131b710aa9132c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[t._v("代理模式 (jdk动态代理 cglib)"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("JDK代理要求被代理的类"),a("strong",[t._v("必须实现接口")])]),t._v(" "),a("p",[t._v("而CGLIB动态代理则没有此类强制性要求。简单的说，"),a("code",[t._v("CGLIB")]),t._v("会让生成的代理类继承被代理类，并在代理类中对代理方法进行强化处理(前置处理、后置处理等)")]),t._v(" "),a("p",[t._v("如果委托类"),a("strong",[t._v("被final修饰")]),t._v("，那么它不可被继承，即"),a("strong",[t._v("不可被代理")]),t._v("；同样，如果委托类中存在final修饰的方法，那么该方法也不可被代理")]),t._v(" "),a("h3",{attrs:{id:"fastclass机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fastclass机制"}},[t._v("#")]),t._v(" Fastclass机制")]),t._v(" "),a("p",[t._v("CGLIB采用了FastClass的机制来实现对被拦截方法的调用。")]),t._v(" "),a("p",[t._v("FastClass机制就是对一个类的方法建立索引，通过索引来直接调用相应的方法")]),t._v(" "),a("p",[a("strong",[t._v("三种代理方式之间对比")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("代理方式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("实现")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("优点")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("缺点")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("特点")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK静态代理")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("代理类与委托类实现同一接口，并且在代理类中需要硬编码接口")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("实现简单，容易理解")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("代理类需要硬编码接口，在实际应用中可能会导致重复编码，浪费存储空间并且效率很低")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("好像没啥特点")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("JDK动态代理")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("代理类与委托类实现同一接口，主要是通过代理类实现InvocationHandler并重写"),a("code",[t._v("invoke")]),t._v("方法来进行动态代理的，在invoke方法中将对方法进行增强处理")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不需要硬编码接口，代码复用率高")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("只能够代理实现了接口的委托类")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("底层使用反射机制进行方法的调用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CGLIB动态代理")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("代理类将委托类作为自己的父类并为其中的非final委托方法创建两个方法，一个是与委托方法签名相同的方法，它在方法中会通过"),a("code",[t._v("super")]),t._v("调用委托方法；另一个是代理类独有的方法。在代理方法中，它会判断是否存在实现了"),a("code",[t._v("MethodInterceptor")]),t._v("接口的对象，若存在则将调用intercept方法对委托方法进行代理")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可以在运行时对类或者是接口进行增强操作，且委托类无需实现接口")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不能对"),a("code",[t._v("final")]),t._v("类以及final方法进行代理")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("底层将方法全部存入一个数组中，通过数组索引直接进行方法调用")])])])])]),t._v(" "),a("p",[a("strong",[t._v("CGlib比JDK快？")])]),t._v(" "),a("ul",[a("li",[t._v("使用CGLiB实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类， 在jdk6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的方法进行代理， 因为CGLib原理是动态生成被代理类的子类。")]),t._v(" "),a("li",[t._v("在jdk6、jdk7、jdk8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLIB代理效率。只有当进行大量调用的时候，jdk6和jdk7比CGLIB代理效率低一点，但是到jdk8的时候，jdk代理效率高于CGLIB代理，总之，每一次jdk版本升级，jdk代理效率都得到提升，而CGLIB代理消息确有点跟不上步伐。")])]),t._v(" "),a("p",[a("strong",[t._v("Spring如何选择用JDK还是CGLIB？")])]),t._v(" "),a("ul",[a("li",[t._v("当Bean实现接口时，Spring就会用JDK的动态代理。")]),t._v(" "),a("li",[t._v("当Bean没有实现接口时，Spring使用CGlib实现。")]),t._v(" "),a("li",[t._v("可以强制使用CGlib")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("讨论客户端服务端接口")])]),t._v(" "),a("h2",{attrs:{id:"learn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#learn"}},[t._v("#")]),t._v(" learn")]),t._v(" "),a("h3",{attrs:{id:"每日一题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[t._v("#")]),t._v(" 每日一题")])])}),[],!1,null,null,null);e.default=v.exports}}]);